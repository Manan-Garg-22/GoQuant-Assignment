{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/lib/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst symbolMap = {\r\n  \"BTC-USD\": \"BTCUSDT\",\r\n  \"ETH-USD\": \"ETHUSDT\",\r\n  \"XRP-USD\": \"XRPUSDT\",\r\n};\r\n\r\nexport const fetchOrderbook = async (currencyPair) => {\r\n  const symbol = symbolMap[currencyPair];\r\n  const response = await axios.get('https://api.binance.com/api/v3/depth', {\r\n    params: {\r\n      symbol: symbol,\r\n      limit: 10,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const fetchOhlcData = async (currencyPair) => {\r\n  const symbol = symbolMap[currencyPair];\r\n  const response = await axios.get('https://api.binance.com/api/v3/klines', {\r\n    params: {\r\n      symbol: symbol,\r\n      interval: '1m',\r\n      limit: 100,\r\n    },\r\n  });\r\n\r\n  const ohlcData = response.data.map(item => ({\r\n    t: new Date(item[0]),\r\n    o: parseFloat(item[1]),\r\n    h: parseFloat(item[2]),\r\n    l: parseFloat(item[3]),\r\n    c: parseFloat(item[4]),\r\n  }));\r\n\r\n  return ohlcData;\r\n};"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,YAAY;IAChB,WAAW;IACX,WAAW;IACX,WAAW;AACb;AAEO,MAAM,iBAAiB,OAAO;IACnC,MAAM,SAAS,SAAS,CAAC,aAAa;IACtC,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,wCAAwC;QACvE,QAAQ;YACN,QAAQ;YACR,OAAO;QACT;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,gBAAgB,OAAO;IAClC,MAAM,SAAS,SAAS,CAAC,aAAa;IACtC,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,yCAAyC;QACxE,QAAQ;YACN,QAAQ;YACR,UAAU;YACV,OAAO;QACT;IACF;IAEA,MAAM,WAAW,SAAS,IAAI,CAAC,GAAG,CAAC,CAAA,OAAQ,CAAC;YAC1C,GAAG,IAAI,KAAK,IAAI,CAAC,EAAE;YACnB,GAAG,WAAW,IAAI,CAAC,EAAE;YACrB,GAAG,WAAW,IAAI,CAAC,EAAE;YACrB,GAAG,WAAW,IAAI,CAAC,EAAE;YACrB,GAAG,WAAW,IAAI,CAAC,EAAE;QACvB,CAAC;IAED,OAAO;AACT"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/components/SpreadIndicator.js"],"sourcesContent":["\"use client\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, registerables } from \"chart.js\";\r\n\r\nChartJS.register(...registerables);\r\n\r\nconst SpreadIndicator = ({ orderbookData }) => {\r\n  const [spreadHistory, setSpreadHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const { bids, asks } = orderbookData;\r\n\r\n      // Ensure bids and asks exist\r\n      if (!bids.length || !asks.length) return;\r\n\r\n      // Calculate the current spread\r\n      const currentSpread = parseFloat(asks[0][0]) - parseFloat(bids[0][0]);\r\n      const timestamp = Date.now(); // Use current timestamp\r\n\r\n      // Add the new spread value to the history\r\n      setSpreadHistory((prev) => {\r\n        // Remove points older than 1 minute (60,000 ms)\r\n        const updatedHistory = prev.filter(\r\n          (dataPoint) => timestamp - dataPoint.timestamp <= 60000\r\n        );\r\n\r\n        // Add the new data point and return\r\n        return [...updatedHistory, { spread: currentSpread, timestamp }];\r\n      });\r\n    }, 1000); // Update every second\r\n\r\n    return () => clearInterval(interval);\r\n  }, [orderbookData]);\r\n\r\n  // Prepare data for the chart\r\n  const data = {\r\n    labels: spreadHistory.map((dataPoint) =>\r\n      new Date(dataPoint.timestamp).toLocaleTimeString()\r\n    ),\r\n    datasets: [\r\n      {\r\n        label: \"Spread (USD)\",\r\n        data: spreadHistory.map((dataPoint) => dataPoint.spread),\r\n        borderColor: \"blue\",\r\n        backgroundColor: \"rgba(135, 206, 250, 0.3)\", // Light blue fill\r\n        fill: true,\r\n        tension: 0.1,\r\n        pointRadius: 2,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        display: true,\r\n        position: \"top\",\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: \"Time\",\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: \"Spread\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Spread Indicator</h3>\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpreadIndicator;\r\n"],"names":[],"mappings":";;;;AACA;AAEA;AADA;AAFA;;;;;AAKA,4JAAA,CAAA,QAAO,CAAC,QAAQ,IAAI,4JAAA,CAAA,gBAAa;AAEjC,MAAM,kBAAkB,CAAC,EAAE,aAAa,EAAE;IACxC,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAErD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,WAAW,YAAY;YAC3B,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG;YAEvB,6BAA6B;YAC7B,IAAI,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,MAAM,EAAE;YAElC,+BAA+B;YAC/B,MAAM,gBAAgB,WAAW,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,WAAW,IAAI,CAAC,EAAE,CAAC,EAAE;YACpE,MAAM,YAAY,KAAK,GAAG,IAAI,wBAAwB;YAEtD,0CAA0C;YAC1C,iBAAiB,CAAC;gBAChB,gDAAgD;gBAChD,MAAM,iBAAiB,KAAK,MAAM,CAChC,CAAC,YAAc,YAAY,UAAU,SAAS,IAAI;gBAGpD,oCAAoC;gBACpC,OAAO;uBAAI;oBAAgB;wBAAE,QAAQ;wBAAe;oBAAU;iBAAE;YAClE;QACF,GAAG,OAAO,sBAAsB;QAEhC,OAAO,IAAM,cAAc;IAC7B,GAAG;QAAC;KAAc;IAElB,6BAA6B;IAC7B,MAAM,OAAO;QACX,QAAQ,cAAc,GAAG,CAAC,CAAC,YACzB,IAAI,KAAK,UAAU,SAAS,EAAE,kBAAkB;QAElD,UAAU;YACR;gBACE,OAAO;gBACP,MAAM,cAAc,GAAG,CAAC,CAAC,YAAc,UAAU,MAAM;gBACvD,aAAa;gBACb,iBAAiB;gBACjB,MAAM;gBACN,SAAS;gBACT,aAAa;YACf;SACD;IACH;IAEA,MAAM,UAAU;QACd,YAAY;QACZ,SAAS;YACP,QAAQ;gBACN,SAAS;gBACT,UAAU;YACZ;QACF;QACA,QAAQ;YACN,GAAG;gBACD,OAAO;oBACL,SAAS;oBACT,MAAM;gBACR;YACF;YACA,GAAG;gBACD,OAAO;oBACL,SAAS;oBACT,MAAM;gBACR;YACF;QACF;IACF;IAEA,qBACE,8OAAC;;0BACC,8OAAC;0BAAG;;;;;;0BACJ,8OAAC,sJAAA,CAAA,OAAI;gBAAC,MAAM;gBAAM,SAAS;;;;;;;;;;;;AAGjC;uCAEe"}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/components/CandlestickChart.js"],"sourcesContent":["/*\"use client\";\r\n\r\nimport { useEffect, useRef } from \"react\";\r\nimport { Chart } from \"chart.js\";\r\nimport { CandlestickController, CandlestickElement, OhlcController, OhlcElement } from \"chartjs-chart-financial\";\r\nimport 'chartjs-adapter-date-fns';\r\n\r\nChart.register(CandlestickController, CandlestickElement, OhlcController, OhlcElement);\r\n\r\nconst CandlestickChart = ({ ohlcData, currencyPair }) => {\r\n  const canvasRef = useRef(null);\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (ohlcData.length === 0 || !canvasRef.current) return;\r\n\r\n    const ctx = canvasRef.current.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Log the data to check its structure\r\n    console.log('OHLC Data:', ohlcData);\r\n\r\n    const chartConfig = {\r\n      type: 'candlestick',\r\n      data: {\r\n        datasets: [{\r\n          label: currencyPair,\r\n          data: ohlcData.map(d => ({\r\n            x: d.t,\r\n            o: d.o,\r\n            h: d.h,\r\n            l: d.l,\r\n            c: d.c\r\n          }))\r\n        }]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        scales: {\r\n          x: {\r\n            type: 'time',\r\n            time: {\r\n              unit: 'minute',\r\n              displayFormats: {\r\n                minute: 'HH:mm'\r\n              }\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Time',\r\n            },\r\n          },\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: 'Price (USD)',\r\n            },\r\n          },\r\n        },\r\n        plugins: {\r\n          legend: {\r\n            display: false,\r\n          },\r\n          tooltip: {\r\n            mode: 'index',\r\n            intersect: false,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    try {\r\n      chartRef.current = new Chart(ctx, chartConfig);\r\n    } catch (error) {\r\n      console.error('Error creating chart:', error);\r\n      // Fallback: display raw data\r\n      ctx.font = '12px Arial';\r\n      ctx.fillText('Error rendering chart. Raw data:', 10, 20);\r\n      ohlcData.forEach((d, i) => {\r\n        ctx.fillText(`${d.t.toLocaleTimeString()}: O:${d.o} H:${d.h} L:${d.l} C:${d.c}`, 10, 40 + i * 20);\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (chartRef.current) {\r\n        chartRef.current.destroy();\r\n      }\r\n    };\r\n  }, [ohlcData, currencyPair]);\r\n\r\n  return (\r\n    <div>\r\n      <h3>{currencyPair} Candlestick Chart</h3>\r\n      <canvas ref={canvasRef}></canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CandlestickChart;*/\r\n\r\n/*\"use client\";\r\n\r\nimport { useEffect, useRef } from \"react\";\r\nimport { Chart } from \"chart.js\";\r\nimport { CandlestickController, CandlestickElement, OhlcController, OhlcElement } from \"chartjs-chart-financial\";\r\nimport 'chartjs-adapter-date-fns';\r\n\r\nChart.register(CandlestickController, CandlestickElement, OhlcController, OhlcElement);\r\n\r\nconst CandlestickChart = ({ ohlcData, currencyPair }) => {\r\n  const canvasRef = useRef(null);\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (ohlcData.length === 0 || !canvasRef.current) return;\r\n\r\n    const ctx = canvasRef.current.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const chartConfig = {\r\n      type: 'candlestick',\r\n      data: {\r\n        datasets: [{\r\n          label: currencyPair,\r\n          data: ohlcData.map(d => ({\r\n            x: d.t,\r\n            o: d.o,\r\n            h: d.h,\r\n            l: d.l,\r\n            c: d.c\r\n          })),\r\n          color: {\r\n            up: '#26a69a',    // Green color for upward movement\r\n            down: '#ef5350',  // Red color for downward movement\r\n          },\r\n          borderColor: {\r\n            up: '#26a69a',\r\n            down: '#ef5350',\r\n          },\r\n          backgroundColor: {\r\n            up: '#26a69a',\r\n            down: '#ef5350',\r\n          },\r\n        }]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        layout: {\r\n          padding: {\r\n            left: 10,\r\n            right: 10,\r\n          }\r\n        },\r\n        scales: {\r\n          x: {\r\n            type: 'time',\r\n            time: {\r\n              unit: 'minute',\r\n              displayFormats: {\r\n                minute: 'HH:mm'\r\n              }\r\n            },\r\n            grid: {\r\n              color: 'rgba(255, 255, 255, 0.1)',\r\n              drawBorder: false,\r\n            },\r\n            ticks: {\r\n              color: 'rgba(255, 255, 255, 0.8)',\r\n              font: {\r\n                size: 11\r\n              }\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Time',\r\n              color: 'rgba(255, 255, 255, 0.8)'\r\n            },\r\n          },\r\n          y: {\r\n            position: 'right',\r\n            grid: {\r\n              color: 'rgba(255, 255, 255, 0.1)',\r\n              drawBorder: false,\r\n            },\r\n            ticks: {\r\n              color: 'rgba(255, 255, 255, 0.8)',\r\n              font: {\r\n                size: 11\r\n              }\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Price (USD)',\r\n              color: 'rgba(255, 255, 255, 0.8)'\r\n            },\r\n          },\r\n        },\r\n        plugins: {\r\n          legend: {\r\n            display: false,\r\n          },\r\n          tooltip: {\r\n            mode: 'index',\r\n            intersect: false,\r\n            callbacks: {\r\n              label: (context) => {\r\n                const point = context.raw;\r\n                return [\r\n                  `Open: ${point.o}`,\r\n                  `High: ${point.h}`,\r\n                  `Low: ${point.l}`,\r\n                  `Close: ${point.c}`\r\n                ];\r\n              }\r\n            },\r\n            backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n            titleColor: 'rgba(255, 255, 255, 1)',\r\n            bodyColor: 'rgba(255, 255, 255, 1)',\r\n            borderColor: 'rgba(255, 255, 255, 0.2)',\r\n            borderWidth: 1\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    // Create dark theme background\r\n    canvasRef.current.style.backgroundColor = '#131722';\r\n    \r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n\r\n    return () => {\r\n      if (chartRef.current) {\r\n        chartRef.current.destroy();\r\n      }\r\n    };\r\n  }, [ohlcData, currencyPair]);\r\n\r\n  return (\r\n    <div style={{ backgroundColor: '#131722', padding: '20px', borderRadius: '4px' }}>\r\n      <h3 style={{ color: 'white', marginBottom: '20px' }}>{currencyPair} Candlestick Chart</h3>\r\n      <div style={{ height: '400px' }}>\r\n        <canvas ref={canvasRef}></canvas>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CandlestickChart;*/\r\n\r\n\"use client\";\r\n\r\nimport { useEffect, useRef } from \"react\";\r\nimport { Chart } from \"chart.js\";\r\nimport { CandlestickController, CandlestickElement } from \"chartjs-chart-financial\";\r\nimport 'chartjs-adapter-date-fns';\r\n\r\nChart.register(CandlestickController, CandlestickElement);\r\n\r\nconst CandlestickChart = ({ ohlcData, currencyPair, fetchNewData }) => {\r\n  const canvasRef = useRef(null);\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!ohlcData || ohlcData.length === 0 || !canvasRef.current) return;\r\n\r\n    const ctx = canvasRef.current.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    // Chart configuration\r\n    const chartConfig = {\r\n      type: \"candlestick\",\r\n      data: {\r\n        datasets: [\r\n          {\r\n            label: currencyPair,\r\n            data: ohlcData.map(d => ({\r\n              x: d.t, // Timestamp\r\n              o: d.o, // Open\r\n              h: d.h, // High\r\n              l: d.l, // Low\r\n              c: d.c, // Close\r\n            })),\r\n            borderColor: {\r\n              up: \"#26a69a\", // Green for upward\r\n              down: \"#ef5350\", // Red for downward\r\n            },\r\n            backgroundColor: {\r\n              up: \"#26a69a\",\r\n              down: \"#ef5350\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        layout: {\r\n          padding: 10,\r\n        },\r\n        scales: {\r\n          x: {\r\n            type: \"time\",\r\n            time: {\r\n              unit: \"minute\",\r\n            },\r\n            grid: {\r\n              color: \"rgba(255, 255, 255, 0.1)\",\r\n            },\r\n            ticks: {\r\n              color: \"rgba(255, 255, 255, 0.8)\",\r\n            },\r\n          },\r\n          y: {\r\n            grid: {\r\n              color: \"rgba(255, 255, 255, 0.1)\",\r\n            },\r\n            ticks: {\r\n              color: \"rgba(255, 255, 255, 0.8)\",\r\n            },\r\n          },\r\n        },\r\n        plugins: {\r\n          tooltip: {\r\n            callbacks: {\r\n              label: context => {\r\n                const point = context.raw;\r\n                return [\r\n                  `Open: ${point.o}`,\r\n                  `High: ${point.h}`,\r\n                  `Low: ${point.l}`,\r\n                  `Close: ${point.c}`,\r\n                ];\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n\r\n    return () => {\r\n      if (chartRef.current) {\r\n        chartRef.current.destroy();\r\n      }\r\n    };\r\n  }, [ohlcData, currencyPair]);\r\n\r\n  // Polling for data updates\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (fetchNewData) {\r\n        fetchNewData();\r\n      }\r\n    }, 10000); // Fetch data every 10 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, [fetchNewData]);\r\n\r\n  return (\r\n    <div style={{ backgroundColor: \"#131722\", padding: \"20px\", borderRadius: \"4px\" }}>\r\n      <h3 style={{ color: \"white\", marginBottom: \"20px\" }}>{currencyPair} Candlestick Chart</h3>\r\n      <div style={{ height: \"400px\" }}>\r\n        <canvas ref={canvasRef}></canvas>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CandlestickChart;\r\n\r\n/*\"use client\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  registerables,\r\n  TimeScale,\r\n  LinearScale,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport \"chartjs-adapter-moment\"; // Import the Moment.js adapter\r\nimport { OhlcController, CandlestickElement } from \"chartjs-chart-financial\";\r\nimport { fetchOhlcData } from \"../lib/api\";\r\n\r\n// Register required components\r\nChartJS.register(\r\n  ...registerables,\r\n  TimeScale,\r\n  LinearScale,\r\n  Tooltip,\r\n  Legend,\r\n  OhlcController,\r\n  CandlestickElement\r\n);\r\n\r\nconst CandlestickChart = ({ currencyPair }) => {\r\n  const [ohlcData, setOhlcData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchChartData = async () => {\r\n      try {\r\n        const data = await fetchOhlcData(currencyPair);\r\n        setOhlcData(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching OHLC data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchChartData();\r\n\r\n    // Optional: Poll every minute for new data\r\n    const interval = setInterval(fetchChartData, 60000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [currencyPair]);\r\n\r\n  useEffect(() => {\r\n    if (!ohlcData.length) return;\r\n\r\n    const ctx = document.getElementById(\"candlestickChart\").getContext(\"2d\");\r\n\r\n    // Destroy any existing chart instance\r\n    if (window.myChart) {\r\n      window.myChart.destroy();\r\n    }\r\n\r\n    // Create the candlestick chart\r\n    window.myChart = new ChartJS(ctx, {\r\n      type: \"candlestick\", // Correctly specify \"candlestick\" chart type\r\n      data: {\r\n        datasets: [\r\n          {\r\n            label: `${currencyPair} Candlestick Chart`,\r\n            data: ohlcData,\r\n            borderColor: \"rgba(255, 255, 255, 0.8)\",\r\n            color: {\r\n              up: \"#29c675\", // Green for upward movement\r\n              down: \"#e54949\", // Red for downward movement\r\n              unchanged: \"#f3f3f3\", // Neutral candles\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        layout: {\r\n          padding: 10,\r\n        },\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n            labels: {\r\n              color: \"#fff\",\r\n            },\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            type: \"time\", // Time scale requires the adapter\r\n            time: {\r\n              tooltipFormat: \"ll HH:mm\", // Display format for tooltips\r\n            },\r\n            grid: {\r\n              color: \"rgba(255, 255, 255, 0.1)\",\r\n            },\r\n            ticks: {\r\n              color: \"#fff\",\r\n              maxRotation: 45,\r\n              minRotation: 0,\r\n            },\r\n          },\r\n          y: {\r\n            grid: {\r\n              color: \"rgba(255, 255, 255, 0.1)\",\r\n            },\r\n            ticks: {\r\n              color: \"#fff\",\r\n            },\r\n          },\r\n        },\r\n        elements: {\r\n          candlestick: {\r\n            borderWidth: 2,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, [ohlcData, currencyPair]);\r\n\r\n  return (\r\n    <div style={{ height: \"400px\", width: \"800px\", backgroundColor: \"#121212\" }}>\r\n      <canvas id=\"candlestickChart\"></canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CandlestickChart;*/\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 792, "column": 35}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 798, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/components/ImbalanceIndicator.js"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, registerables } from \"chart.js\";\r\n\r\nChartJS.register(...registerables);\r\n\r\nconst ImbalanceIndicator = ({ orderbookData }) => {\r\n  const [imbalanceHistory, setImbalanceHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const { bids, asks } = orderbookData;\r\n\r\n      // Ensure bids and asks exist\r\n      if (!bids.length || !asks.length) return;\r\n\r\n      // Calculate the current imbalance\r\n      const bidVolume = bids.reduce((sum, bid) => sum + parseFloat(bid[1]), 0);\r\n      const askVolume = asks.reduce((sum, ask) => sum + parseFloat(ask[1]), 0);\r\n      const currentImbalance = bidVolume / (bidVolume + askVolume);\r\n      const timestamp = Date.now();\r\n\r\n      // Add the new imbalance value to the history\r\n      setImbalanceHistory((prev) => {\r\n        // Remove points older than 1 minute (60,000 ms)\r\n        const updatedHistory = prev.filter(\r\n          (dataPoint) => timestamp - dataPoint.timestamp <= 60000\r\n        );\r\n\r\n        // Add the new data point and return\r\n        return [...updatedHistory, { imbalance: currentImbalance, timestamp }];\r\n      });\r\n    }, 1000); // Update every second\r\n\r\n    return () => clearInterval(interval);\r\n  }, [orderbookData]);\r\n\r\n  // Prepare data for the chart\r\n  const data = {\r\n    labels: imbalanceHistory.map((dataPoint) =>\r\n      new Date(dataPoint.timestamp).toLocaleTimeString()\r\n    ),\r\n    datasets: [\r\n      {\r\n        label: \"Imbalance\",\r\n        data: imbalanceHistory.map((dataPoint) => dataPoint.imbalance),\r\n        borderColor: \"purple\",\r\n        backgroundColor: \"rgba(128, 0, 128, 0.2)\",\r\n        tension: 0.1,\r\n        pointRadius: 2,\r\n        fill: true,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        display: true,\r\n        position: \"top\",\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: \"Time\",\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: \"Imbalance\",\r\n        },\r\n        min: 0,\r\n        max: 1,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Imbalance Indicator</h3>\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImbalanceIndicator;"],"names":[],"mappings":";;;;AAEA;AAEA;AADA;AAHA;;;;;AAMA,4JAAA,CAAA,QAAO,CAAC,QAAQ,IAAI,4JAAA,CAAA,gBAAa;AAEjC,MAAM,qBAAqB,CAAC,EAAE,aAAa,EAAE;IAC3C,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAE3D,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,WAAW,YAAY;YAC3B,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG;YAEvB,6BAA6B;YAC7B,IAAI,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,MAAM,EAAE;YAElC,kCAAkC;YAClC,MAAM,YAAY,KAAK,MAAM,CAAC,CAAC,KAAK,MAAQ,MAAM,WAAW,GAAG,CAAC,EAAE,GAAG;YACtE,MAAM,YAAY,KAAK,MAAM,CAAC,CAAC,KAAK,MAAQ,MAAM,WAAW,GAAG,CAAC,EAAE,GAAG;YACtE,MAAM,mBAAmB,YAAY,CAAC,YAAY,SAAS;YAC3D,MAAM,YAAY,KAAK,GAAG;YAE1B,6CAA6C;YAC7C,oBAAoB,CAAC;gBACnB,gDAAgD;gBAChD,MAAM,iBAAiB,KAAK,MAAM,CAChC,CAAC,YAAc,YAAY,UAAU,SAAS,IAAI;gBAGpD,oCAAoC;gBACpC,OAAO;uBAAI;oBAAgB;wBAAE,WAAW;wBAAkB;oBAAU;iBAAE;YACxE;QACF,GAAG,OAAO,sBAAsB;QAEhC,OAAO,IAAM,cAAc;IAC7B,GAAG;QAAC;KAAc;IAElB,6BAA6B;IAC7B,MAAM,OAAO;QACX,QAAQ,iBAAiB,GAAG,CAAC,CAAC,YAC5B,IAAI,KAAK,UAAU,SAAS,EAAE,kBAAkB;QAElD,UAAU;YACR;gBACE,OAAO;gBACP,MAAM,iBAAiB,GAAG,CAAC,CAAC,YAAc,UAAU,SAAS;gBAC7D,aAAa;gBACb,iBAAiB;gBACjB,SAAS;gBACT,aAAa;gBACb,MAAM;YACR;SACD;IACH;IAEA,MAAM,UAAU;QACd,YAAY;QACZ,SAAS;YACP,QAAQ;gBACN,SAAS;gBACT,UAAU;YACZ;QACF;QACA,QAAQ;YACN,GAAG;gBACD,OAAO;oBACL,SAAS;oBACT,MAAM;gBACR;YACF;YACA,GAAG;gBACD,OAAO;oBACL,SAAS;oBACT,MAAM;gBACR;gBACA,KAAK;gBACL,KAAK;YACP;QACF;IACF;IAEA,qBACE,8OAAC;;0BACC,8OAAC;0BAAG;;;;;;0BACJ,8OAAC,sJAAA,CAAA,OAAI;gBAAC,MAAM;gBAAM,SAAS;;;;;;;;;;;;AAGjC;uCAEe"}},
    {"offset": {"line": 906, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 912, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/components/CurrencySelector.js"],"sourcesContent":["\"use client\";\r\n\r\n//import { Button } from \"@/components/ui/button\";\r\n\r\nconst CurrencySelector = ({ selectedCurrency, onCurrencyChange }) => {\r\n  const currencies = [\"BTC-USD\", \"ETH-USD\", \"XRP-USD\"];\r\n\r\n  return (\r\n    <div className=\"flex justify-center space-x-4 mb-4\">\r\n      {currencies.map((currency) => (\r\n        <button\r\n          key={currency}\r\n          onClick={() => onCurrencyChange(currency)}\r\n          variant={selectedCurrency === currency ? \"default\" : \"outline\"}\r\n        >\r\n          {currency}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencySelector;"],"names":[],"mappings":";;;;AAAA;;AAEA,kDAAkD;AAElD,MAAM,mBAAmB,CAAC,EAAE,gBAAgB,EAAE,gBAAgB,EAAE;IAC9D,MAAM,aAAa;QAAC;QAAW;QAAW;KAAU;IAEpD,qBACE,8OAAC;QAAI,WAAU;kBACZ,WAAW,GAAG,CAAC,CAAC,yBACf,8OAAC;gBAEC,SAAS,IAAM,iBAAiB;gBAChC,SAAS,qBAAqB,WAAW,YAAY;0BAEpD;eAJI;;;;;;;;;;AASf;uCAEe"}},
    {"offset": {"line": 943, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 949, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/components/Orderbook.js"],"sourcesContent":["/*\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { fetchOrderbook, fetchOhlcData } from \"../lib/api\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, registerables } from \"chart.js\";\r\nimport SpreadIndicator from \"./SpreadIndicator\";\r\nimport CandlestickChart from \"./CandlestickChart\";\r\nimport ImbalanceIndicator from \"./ImbalanceIndicator\";\r\n\r\nChartJS.register(...registerables);\r\n\r\nexport default function Orderbook() {\r\n  const [orderbook, setOrderbook] = useState({ bids: [], asks: [] });\r\n  const [spread, setSpread] = useState(0);\r\n  const [imbalance, setImbalance] = useState(0);\r\n  const [ohlcData, setOhlcData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      // Fetch orderbook data\r\n      const orderbookData = await fetchOrderbook();\r\n      setOrderbook(orderbookData);\r\n\r\n      // Calculate spread\r\n      const spreadValue =\r\n        orderbookData.bids[0] && orderbookData.asks[0]\r\n          ? parseFloat(orderbookData.asks[0][0]) - parseFloat(orderbookData.bids[0][0])\r\n          : 0;\r\n      setSpread(spreadValue);\r\n\r\n      // Calculate orderbook imbalance\r\n      const bidVolume = orderbookData.bids.reduce((sum, bid) => sum + parseFloat(bid[1]), 0);\r\n      const askVolume = orderbookData.asks.reduce((sum, ask) => sum + parseFloat(ask[1]), 0);\r\n      setImbalance(bidVolume / (bidVolume + askVolume));\r\n\r\n      // Fetch OHLC data\r\n      const ohlc = await fetchOhlcData();\r\n      setOhlcData(\r\n        ohlc.map((item) => ({\r\n          t: new Date(item.timestamp),\r\n          o: item.open,\r\n          h: item.high,\r\n          l: item.low,\r\n          c: item.close,\r\n        }))\r\n      );\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const marketDepthData = {\r\n    labels: orderbook.bids.map((bid) => bid[0]),\r\n    datasets: [\r\n      {\r\n        label: \"Bids\",\r\n        data: orderbook.bids.map((bid) => bid[1]),\r\n        borderColor: \"green\",\r\n        fill: false,\r\n      },\r\n      {\r\n        label: \"Asks\",\r\n        data: orderbook.asks.map((ask) => ask[1]),\r\n        borderColor: \"red\",\r\n        fill: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Real-time BTC-USD Orderbook</h2>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n        <div>\r\n          <h3 className=\"text-xl font-semibold mb-2\">Bids</h3>\r\n          <ul className=\"bg-green-100 p-2 rounded\">\r\n            {orderbook.bids.slice(0, 10).map((bid, index) => (\r\n              <li key={index} className=\"mb-1\">{`Price: ${bid[0]}, Quantity: ${bid[1]}`}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <div>\r\n          <h3 className=\"text-xl font-semibold mb-2\">Asks</h3>\r\n          <ul className=\"bg-red-100 p-2 rounded\">\r\n            {orderbook.asks.slice(0, 10).map((ask, index) => (\r\n              <li key={index} className=\"mb-1\">{`Price: ${ask[0]}, Quantity: ${ask[1]}`}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mb-4\">\r\n        <h3 className=\"text-xl font-semibold\">Spread: {spread.toFixed(2)}</h3>\r\n        <h3 className=\"text-xl font-semibold\">Imbalance: {imbalance.toFixed(2)}</h3>\r\n      </div>\r\n\r\n      <div className=\"mb-8\">\r\n        <SpreadIndicator orderbookData={orderbook} />\r\n      </div>\r\n\r\n      <div className=\"mb-8\">\r\n        <ImbalanceIndicator orderbookData={orderbook} />\r\n      </div>\r\n\r\n      <div className=\"mb-8\">\r\n        <CandlestickChart ohlcData={ohlcData} />\r\n      </div>\r\n\r\n      <div>\r\n        <h3 className=\"text-xl font-semibold mb-2\">Market Depth Chart</h3>\r\n        <Line data={marketDepthData} options={{\r\n          responsive: true,\r\n          scales: {\r\n            x: {\r\n              title: {\r\n                display: true,\r\n                text: 'Price (USD)',\r\n              },\r\n            },\r\n            y: {\r\n              title: {\r\n                display: true,\r\n                text: 'Quantity',\r\n              },\r\n            },\r\n          },\r\n        }} />\r\n      </div>\r\n    </div>\r\n  );\r\n}*/\r\n\r\n\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { fetchOrderbook, fetchOhlcData } from \"../lib/api\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, registerables } from \"chart.js\";\r\nimport SpreadIndicator from \"./SpreadIndicator\";\r\nimport CandlestickChart from \"./CandlestickChart\";\r\nimport ImbalanceIndicator from \"./ImbalanceIndicator\";\r\nimport CurrencySelector from \"./CurrencySelector\";\r\nimport MarketDepthChart from \"./MarketDepthChart\";\r\nChartJS.register(...registerables);\r\n\r\nexport default function Orderbook() {\r\n  const [selectedCurrency, setSelectedCurrency] = useState(\"BTC-USD\");\r\n  const [orderbook, setOrderbook] = useState({ bids: [], asks: [] });\r\n  const [spread, setSpread] = useState(0);\r\n  const [imbalance, setImbalance] = useState(0);\r\n  const [ohlcData, setOhlcData] = useState([]);\r\n\r\n  const fetchData = async () => {\r\n    const orderbookData = await fetchOrderbook(selectedCurrency);\r\n    setOrderbook(orderbookData);\r\n\r\n    const spreadValue =\r\n      orderbookData.bids[0] && orderbookData.asks[0]\r\n        ? parseFloat(orderbookData.asks[0][0]) - parseFloat(orderbookData.bids[0][0])\r\n        : 0;\r\n    setSpread(spreadValue);\r\n\r\n    const bidVolume = orderbookData.bids.reduce((sum, bid) => sum + parseFloat(bid[1]), 0);\r\n    const askVolume = orderbookData.asks.reduce((sum, ask) => sum + parseFloat(ask[1]), 0);\r\n    setImbalance(bidVolume / (bidVolume + askVolume));\r\n\r\n    const ohlc = await fetchOhlcData(selectedCurrency);\r\n    setOhlcData(\r\n      ohlc.map((item) => ({\r\n        t: new Date(item.t),\r\n        o: item.o,\r\n        h: item.h,\r\n        l: item.l,\r\n        c: item.c,\r\n      }))\r\n    );\r\n    console.log('Processed OHLC Data:', ohlcData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    const interval = setInterval(fetchData, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [selectedCurrency]);\r\n\r\n  const marketDepthData = {\r\n    labels: orderbook.bids.map((bid) => bid[0]),\r\n    datasets: [\r\n      {\r\n        label: \"Bids\",\r\n        data: orderbook.bids.map((bid) => bid[1]),\r\n        borderColor: \"green\",\r\n        fill: false,\r\n      },\r\n      {\r\n        label: \"Asks\",\r\n        data: orderbook.asks.map((ask) => ask[1]),\r\n        borderColor: \"red\",\r\n        fill: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Real-time {selectedCurrency} Orderbook</h2>\r\n      <CurrencySelector\r\n        selectedCurrency={selectedCurrency}\r\n        onCurrencyChange={setSelectedCurrency}\r\n      />\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n        <div>\r\n          <h3 className=\"text-xl font-semibold mb-2\">Bids</h3>\r\n          <ul className=\"bg-green-100 p-2 rounded\">\r\n            {orderbook.bids.slice(0, 10).map((bid, index) => (\r\n              <li key={index} className=\"mb-1\">{`Price: ${bid[0]}, Quantity: ${bid[1]}`}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <div>\r\n          <h3 className=\"text-xl font-semibold mb-2\">Asks</h3>\r\n          <ul className=\"bg-red-100 p-2 rounded\">\r\n            {orderbook.asks.slice(0, 10).map((ask, index) => (\r\n              <li key={index} className=\"mb-1\">{`Price: ${ask[0]}, Quantity: ${ask[1]}`}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mb-4\">\r\n        <h3 className=\"text-xl font-semibold\">Spread: {spread.toFixed(2)}</h3>\r\n        <h3 className=\"text-xl font-semibold\">Imbalance: {imbalance.toFixed(2)}</h3>\r\n      </div>\r\n\r\n      <div className=\"mb-8\">\r\n        <SpreadIndicator orderbookData={orderbook} />\r\n      </div>\r\n\r\n      <div className=\"mb-8\">\r\n        <ImbalanceIndicator orderbookData={orderbook} />\r\n      </div>\r\n\r\n      <div className=\"mb-8\">\r\n        <CandlestickChart ohlcData={ohlcData} currencyPair={selectedCurrency} />\r\n      </div>\r\n\r\n      <div>\r\n        <h3 className=\"text-xl font-semibold mb-2\">Market Depth Chart</h3>\r\n        <Line data={marketDepthData} options={{\r\n          responsive: true,\r\n          scales: {\r\n            x: {\r\n              title: {\r\n                display: true,\r\n                text: 'Price (USD)',\r\n              },\r\n            },\r\n            y: {\r\n              title: {\r\n                display: true,\r\n                text: 'Quantity',\r\n              },\r\n            },\r\n          },\r\n        }} />\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1372, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}