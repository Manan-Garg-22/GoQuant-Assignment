{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/lib/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Fetch orderbook data from Binance API\r\nexport const fetchOrderbook = async () => {\r\n  const response = await axios.get('https://api.binance.com/api/v3/depth', {\r\n    params: {\r\n      symbol: 'BTCUSDT',\r\n      limit: 10,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Fetch OHLC (candlestick) data from Binance API\r\nexport const fetchOhlcData = async () => {\r\n  const response = await axios.get('https://api.binance.com/api/v3/klines', {\r\n    params: {\r\n      symbol: 'BTCUSDT', // Use the symbol you need\r\n      interval: '1m', // Interval for candlesticks (1m = 1 minute, adjust as needed)\r\n      limit: 100, // Number of candlesticks to fetch\r\n    },\r\n  });\r\n\r\n  // Format the data into { t, o, h, l, c } for Chart.js\r\n  const ohlcData = response.data.map(item => ({\r\n    t: new Date(item[0]),  // Timestamp\r\n    o: parseFloat(item[1]), // Open price\r\n    h: parseFloat(item[2]), // High price\r\n    l: parseFloat(item[3]), // Low price\r\n    c: parseFloat(item[4]), // Close price\r\n  }));\r\n\r\n  return ohlcData;\r\n};\r\n"],"names":[],"mappings":";;;;AAAA;;AAGO,MAAM,iBAAiB;IAC5B,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,wCAAwC;QACvE,QAAQ;YACN,QAAQ;YACR,OAAO;QACT;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,gBAAgB;IAC3B,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,yCAAyC;QACxE,QAAQ;YACN,QAAQ;YACR,UAAU;YACV,OAAO;QACT;IACF;IAEA,sDAAsD;IACtD,MAAM,WAAW,SAAS,IAAI,CAAC,GAAG,CAAC,CAAA,OAAQ,CAAC;YAC1C,GAAG,IAAI,KAAK,IAAI,CAAC,EAAE;YACnB,GAAG,WAAW,IAAI,CAAC,EAAE;YACrB,GAAG,WAAW,IAAI,CAAC,EAAE;YACrB,GAAG,WAAW,IAAI,CAAC,EAAE;YACrB,GAAG,WAAW,IAAI,CAAC,EAAE;QACvB,CAAC;IAED,OAAO;AACT"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/components/SpreadIndicator.js"],"sourcesContent":["/*\"use client\";\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst SpreadIndicator = ({ orderbookData }) => {\r\n  const chartRef = useRef(null);\r\n\r\n  const [chartData, setChartData] = useState({\r\n    labels: [], // Timestamps\r\n    datasets: [\r\n      {\r\n        label: 'Spread (USD)',\r\n        data: [], // Spread values\r\n        borderColor: 'rgb(75, 192, 192)',\r\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n        tension: 0.4,\r\n      },\r\n    ],\r\n  });\r\n\r\n  const [chartOptions] = useState({\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: true,\r\n        position: 'top',\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: 'Time',\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: 'Spread (USD)',\r\n        },\r\n        beginAtZero: true,\r\n      },\r\n    },\r\n  });\r\n\r\n  // Function to update chart with new spread data\r\n  const updateSpreadData = () => {\r\n    if (!orderbookData) return;\r\n\r\n    const bestBid = orderbookData.bids[0]?.[0]; // Best Bid Price\r\n    const bestAsk = orderbookData.asks[0]?.[0]; // Best Ask Price\r\n\r\n    if (!bestBid || !bestAsk) return;\r\n\r\n    const spread = parseFloat(bestAsk) - parseFloat(bestBid);\r\n    const now = new Date().toLocaleTimeString();\r\n\r\n    setChartData((prevData) => {\r\n      const updatedLabels = [...prevData.labels, now];\r\n      const updatedData = [...prevData.datasets[0].data, spread];\r\n\r\n      // Maintain a rolling 1-minute window (e.g., 60 data points if updated every second)\r\n      if (updatedLabels.length > 60) {\r\n        updatedLabels.shift();\r\n        updatedData.shift();\r\n      }\r\n\r\n      return {\r\n        ...prevData,\r\n        labels: updatedLabels,\r\n        datasets: [\r\n          {\r\n            ...prevData.datasets[0],\r\n            data: updatedData,\r\n          },\r\n        ],\r\n      };\r\n    });\r\n  };\r\n\r\n  // Hook to update chart data every time orderbook updates\r\n  useEffect(() => {\r\n    updateSpreadData();\r\n  }, [orderbookData]);\r\n\r\n  return (\r\n    <div style={{ height: '300px', marginBottom: '20px' }}>\r\n      <Line ref={chartRef} data={chartData} options={chartOptions} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpreadIndicator;*/\r\n\r\n\"use client\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, registerables } from \"chart.js\";\r\n\r\nChartJS.register(...registerables);\r\n\r\nconst SpreadIndicator = ({ orderbookData }) => {\r\n  const [spreadHistory, setSpreadHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const { bids, asks } = orderbookData;\r\n\r\n      // Ensure bids and asks exist\r\n      if (!bids.length || !asks.length) return;\r\n\r\n      // Calculate the current spread\r\n      const currentSpread = parseFloat(asks[0][0]) - parseFloat(bids[0][0]);\r\n      const timestamp = Date.now(); // Use current timestamp\r\n\r\n      // Add the new spread value to the history\r\n      setSpreadHistory((prev) => {\r\n        // Remove points older than 1 minute (60,000 ms)\r\n        const updatedHistory = prev.filter(\r\n          (dataPoint) => timestamp - dataPoint.timestamp <= 60000\r\n        );\r\n\r\n        // Add the new data point and return\r\n        return [...updatedHistory, { spread: currentSpread, timestamp }];\r\n      });\r\n    }, 1000); // Update every second\r\n\r\n    return () => clearInterval(interval);\r\n  }, [orderbookData]);\r\n\r\n  // Prepare data for the chart\r\n  const data = {\r\n    labels: spreadHistory.map((dataPoint) =>\r\n      new Date(dataPoint.timestamp).toLocaleTimeString()\r\n    ),\r\n    datasets: [\r\n      {\r\n        label: \"Spread (USD)\",\r\n        data: spreadHistory.map((dataPoint) => dataPoint.spread),\r\n        borderColor: \"blue\",\r\n        tension: 0.1,\r\n        pointRadius: 2,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        display: true,\r\n        position: \"top\",\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: \"Time\",\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: \"Spread\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Spread Indicator</h3>\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpreadIndicator;\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAgG+B;;;;AAG/B;AAEA;AADA;AAFA;;;;;AAKA,4JAAA,CAAA,QAAO,CAAC,QAAQ,IAAI,4JAAA,CAAA,gBAAa;AAEjC,MAAM,kBAAkB,CAAC,EAAE,aAAa,EAAE;IACxC,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAErD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,WAAW,YAAY;YAC3B,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG;YAEvB,6BAA6B;YAC7B,IAAI,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,MAAM,EAAE;YAElC,+BAA+B;YAC/B,MAAM,gBAAgB,WAAW,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,WAAW,IAAI,CAAC,EAAE,CAAC,EAAE;YACpE,MAAM,YAAY,KAAK,GAAG,IAAI,wBAAwB;YAEtD,0CAA0C;YAC1C,iBAAiB,CAAC;gBAChB,gDAAgD;gBAChD,MAAM,iBAAiB,KAAK,MAAM,CAChC,CAAC,YAAc,YAAY,UAAU,SAAS,IAAI;gBAGpD,oCAAoC;gBACpC,OAAO;uBAAI;oBAAgB;wBAAE,QAAQ;wBAAe;oBAAU;iBAAE;YAClE;QACF,GAAG,OAAO,sBAAsB;QAEhC,OAAO,IAAM,cAAc;IAC7B,GAAG;QAAC;KAAc;IAElB,6BAA6B;IAC7B,MAAM,OAAO;QACX,QAAQ,cAAc,GAAG,CAAC,CAAC,YACzB,IAAI,KAAK,UAAU,SAAS,EAAE,kBAAkB;QAElD,UAAU;YACR;gBACE,OAAO;gBACP,MAAM,cAAc,GAAG,CAAC,CAAC,YAAc,UAAU,MAAM;gBACvD,aAAa;gBACb,SAAS;gBACT,aAAa;YACf;SACD;IACH;IAEA,MAAM,UAAU;QACd,YAAY;QACZ,SAAS;YACP,QAAQ;gBACN,SAAS;gBACT,UAAU;YACZ;QACF;QACA,QAAQ;YACN,GAAG;gBACD,OAAO;oBACL,SAAS;oBACT,MAAM;gBACR;YACF;YACA,GAAG;gBACD,OAAO;oBACL,SAAS;oBACT,MAAM;gBACR;YACF;QACF;IACF;IAEA,qBACE,8OAAC;;0BACC,8OAAC;0BAAG;;;;;;0BACJ,8OAAC,sJAAA,CAAA,OAAI;gBAAC,MAAM;gBAAM,SAAS;;;;;;;;;;;;AAGjC;uCAEe"}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/components/CandlestickChart.js"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useRef } from \"react\";\r\nimport { Chart } from \"chart.js\";\r\nimport { CandlestickController, CandlestickElement, OhlcController, OhlcElement } from \"chartjs-chart-financial\";\r\nimport 'chartjs-adapter-date-fns';\r\n\r\n// Register the financial chart components\r\nChart.register(CandlestickController, CandlestickElement, OhlcController, OhlcElement);\r\n\r\nconst CandlestickChart = ({ ohlcData }) => {\r\n  const canvasRef = useRef(null);\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (ohlcData.length === 0 || !canvasRef.current) return;\r\n\r\n    const ctx = canvasRef.current.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const chartConfig = {\r\n      type: 'candlestick',\r\n      data: {\r\n        datasets: [{\r\n          label: 'BTC/USD',\r\n          data: ohlcData,\r\n        }]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        scales: {\r\n          x: {\r\n            type: 'time',\r\n            time: {\r\n              unit: 'minute',\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Time',\r\n            },\r\n          },\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: 'Price (USD)',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    // Destroy existing chart if it exists\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Create new chart\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (chartRef.current) {\r\n        chartRef.current.destroy();\r\n      }\r\n    };\r\n  }, [ohlcData]);\r\n\r\n  return (\r\n    <div>\r\n      <h3>BTC/USD Candlestick Chart</h3>\r\n      <canvas ref={canvasRef}></canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CandlestickChart;"],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AAFA;AAHA;;;;;;AAOA,0CAA0C;AAC1C,4JAAA,CAAA,QAAK,CAAC,QAAQ,CAAC,6LAAA,CAAA,wBAAqB,EAAE,6LAAA,CAAA,qBAAkB,EAAE,6LAAA,CAAA,iBAAc,EAAE,6LAAA,CAAA,cAAW;AAErF,MAAM,mBAAmB,CAAC,EAAE,QAAQ,EAAE;IACpC,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IACzB,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAExB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,SAAS,MAAM,KAAK,KAAK,CAAC,UAAU,OAAO,EAAE;QAEjD,MAAM,MAAM,UAAU,OAAO,CAAC,UAAU,CAAC;QACzC,IAAI,CAAC,KAAK;QAEV,MAAM,cAAc;YAClB,MAAM;YACN,MAAM;gBACJ,UAAU;oBAAC;wBACT,OAAO;wBACP,MAAM;oBACR;iBAAE;YACJ;YACA,SAAS;gBACP,YAAY;gBACZ,QAAQ;oBACN,GAAG;wBACD,MAAM;wBACN,MAAM;4BACJ,MAAM;wBACR;wBACA,OAAO;4BACL,SAAS;4BACT,MAAM;wBACR;oBACF;oBACA,GAAG;wBACD,OAAO;4BACL,SAAS;4BACT,MAAM;wBACR;oBACF;gBACF;YACF;QACF;QAEA,sCAAsC;QACtC,IAAI,SAAS,OAAO,EAAE;YACpB,SAAS,OAAO,CAAC,OAAO;QAC1B;QAEA,mBAAmB;QACnB,SAAS,OAAO,GAAG,IAAI,4JAAA,CAAA,QAAK,CAAC,KAAK;QAElC,mBAAmB;QACnB,OAAO;YACL,IAAI,SAAS,OAAO,EAAE;gBACpB,SAAS,OAAO,CAAC,OAAO;YAC1B;QACF;IACF,GAAG;QAAC;KAAS;IAEb,qBACE,8OAAC;;0BACC,8OAAC;0BAAG;;;;;;0BACJ,8OAAC;gBAAO,KAAK;;;;;;;;;;;;AAGnB;uCAEe"}},
    {"offset": {"line": 432, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/components/Orderbook.js"],"sourcesContent":["/*\"use client\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { fetchOrderbook, fetchOhlcData } from \"../lib/api\"; // Assuming you have a function to fetch OHLC data\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, registerables } from \"chart.js\";\r\nimport SpreadIndicator from \"../components/SpreadIndicator\";\r\nimport CandlestickChart from \"../components/CandlestickChart\";\r\n\r\nChartJS.register(...registerables);\r\n\r\nconst Orderbook = () => {\r\n  const [orderbook, setOrderbook] = useState({ bids: [], asks: [] });\r\n  const [spread, setSpread] = useState(0);\r\n  const [imbalance, setImbalance] = useState(0);\r\n  const [ohlcData, setOhlcData] = useState([]); // State for OHLC data\r\n\r\n  // Fetch orderbook and OHLC data every second\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      // Fetch orderbook data\r\n      const orderbookData = await fetchOrderbook();\r\n      setOrderbook(orderbookData);\r\n\r\n      // Calculate spread\r\n      const spreadValue =\r\n        orderbookData.bids[0] && orderbookData.asks[0]\r\n          ? parseFloat(orderbookData.asks[0][0]) - parseFloat(orderbookData.bids[0][0])\r\n          : 0;\r\n      setSpread(spreadValue);\r\n\r\n      // Calculate orderbook imbalance\r\n      const bidVolume = orderbookData.bids.reduce((sum, bid) => sum + parseFloat(bid[1]), 0);\r\n      const askVolume = orderbookData.asks.reduce((sum, ask) => sum + parseFloat(ask[1]), 0);\r\n      setImbalance(bidVolume / (bidVolume + askVolume));\r\n\r\n      // Fetch OHLC data\r\n      const ohlc = await fetchOhlcData(); // Replace with your actual API function to fetch OHLC data\r\n      setOhlcData(\r\n        ohlc.map((item) => ({\r\n          t: new Date(item.timestamp), // Timestamp of the candlestick\r\n          o: item.open,               // Open price\r\n          h: item.high,               // High price\r\n          l: item.low,                // Low price\r\n          c: item.close,              // Close price\r\n        }))\r\n      );\r\n    }, 1000); // Update every second\r\n\r\n    return () => clearInterval(interval);\r\n  }, []); // Empty dependency array to run this effect only once on mount\r\n\r\n  const marketDepthData = {\r\n    labels: orderbook.bids.map((bid) => bid[0]),\r\n    datasets: [\r\n      {\r\n        label: \"Bids\",\r\n        data: orderbook.bids.map((bid) => bid[1]),\r\n        borderColor: \"green\",\r\n        fill: false,\r\n      },\r\n      {\r\n        label: \"Asks\",\r\n        data: orderbook.asks.map((ask) => ask[1]),\r\n        borderColor: \"red\",\r\n        fill: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Real-time BTC-USD Orderbook</h2>\r\n\r\n      <div>\r\n        <h3>Bids</h3>\r\n        <ul>\r\n          {orderbook.bids.map((bid, index) => (\r\n            <li key={index}>{`Price: ${bid[0]}, Quantity: ${bid[1]}`}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <h3>Asks</h3>\r\n        <ul>\r\n          {orderbook.asks.map((ask, index) => (\r\n            <li key={index}>{`Price: ${ask[0]}, Quantity: ${ask[1]}`}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h3>Spread: {spread}</h3>\r\n        <h3>Imbalance: {imbalance}</h3>\r\n      </div>\r\n\r\n      <div>\r\n        <SpreadIndicator orderbookData={orderbook} />\r\n      </div>\r\n\r\n      <div>\r\n       \r\n        <CandlestickChart ohlcData={ohlcData} />\r\n      </div>\r\n\r\n      <div>\r\n        <h3>Market Depth Chart</h3>\r\n        <Line data={marketDepthData} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Orderbook;*/\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAgHyB,GAhHzB"}},
    {"offset": {"line": 549, "column": 28}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 555, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/components/MarketDepthChart.js"],"sourcesContent":["// components.js\r\n\"use client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\n// Register Chart.js components\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\r\n\r\nconst MarketDepthChart = () => {\r\n  const [bids, setBids] = useState([]);\r\n  const [asks, setAsks] = useState([]);\r\n  const [midMarketPrice, setMidMarketPrice] = useState(null);\r\n\r\n  // Fetch orderbook data from Binance API\r\n  const fetchOrderBookData = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://api.binance.com/api/v3/depth?symbol=BTCUSDT&limit=10\" // Replace with your API if needed\r\n      );\r\n      const data = await response.json();\r\n\r\n      // Process bids and asks\r\n      const formattedBids = data.bids.map((bid) => ({\r\n        price: parseFloat(bid[0]),\r\n        quantity: parseFloat(bid[1]),\r\n      }));\r\n      const formattedAsks = data.asks.map((ask) => ({\r\n        price: parseFloat(ask[0]),\r\n        quantity: parseFloat(ask[1]),\r\n      }));\r\n\r\n      // Calculate cumulative quantities for depth\r\n      const bidsWithCumulativeQty = calculateCumulativeDepth(formattedBids);\r\n      const asksWithCumulativeQty = calculateCumulativeDepth(formattedAsks);\r\n\r\n      // Set state\r\n      setBids(bidsWithCumulativeQty.reverse()); // Reverse bids for proper plotting\r\n      setAsks(asksWithCumulativeQty);\r\n      setMidMarketPrice(\r\n        (parseFloat(data.bids[0][0]) + parseFloat(data.asks[0][0])) / 2\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error fetching orderbook data:\", error);\r\n    }\r\n  };\r\n\r\n  // Helper function to calculate cumulative depth\r\n  const calculateCumulativeDepth = (orders) => {\r\n    let cumulativeQty = 0;\r\n    return orders.map((order) => {\r\n      cumulativeQty += order.quantity;\r\n      return { ...order, cumulativeQty };\r\n    });\r\n  };\r\n\r\n  // Fetch data every second\r\n  useEffect(() => {\r\n    fetchOrderBookData();\r\n    const interval = setInterval(fetchOrderBookData, 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Chart data\r\n  const chartData = {\r\n    labels: [...bids.map((bid) => bid.price), ...asks.map((ask) => ask.price)],\r\n    datasets: [\r\n      {\r\n        label: \"Market Depth\",\r\n        data: [\r\n          ...bids.map((bid) => bid.cumulativeQty),\r\n          ...asks.map((ask) => ask.cumulativeQty),\r\n        ],\r\n        borderColor: \"rgba(0,0,0,0)\",\r\n        backgroundColor: (context) => {\r\n          const chartLabels = context.chart.data.labels;\r\n          return chartLabels.map((price) =>\r\n            price <= midMarketPrice\r\n              ? \"rgba(0, 255, 0, 0.5)\" // Green for bids\r\n              : \"rgba(255, 0, 0, 0.5)\" // Red for asks\r\n          );\r\n        },\r\n        fill: true,\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Chart options\r\n  const chartOptions = {\r\n    responsive: true,\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: \"Price (USD)\",\r\n        },\r\n        grid: {\r\n          display: false,\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: \"Cumulative Quantity\",\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: (context) =>\r\n            `Price: ${context.label}, Depth: ${context.raw.toFixed(2)}`,\r\n        },\r\n      },\r\n      legend: {\r\n        display: false,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxWidth: \"800px\", margin: \"0 auto\", padding: \"20px\" }}>\r\n      <h2 style={{ textAlign: \"center\" }}>Depth Chart</h2>\r\n      <Line data={chartData} options={chartOptions} />\r\n      <p style={{ textAlign: \"center\" }}>\r\n        Mid Market Price: {midMarketPrice?.toFixed(2)}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarketDepthChart;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 719, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}