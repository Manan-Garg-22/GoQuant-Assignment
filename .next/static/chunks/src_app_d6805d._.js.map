{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/lib/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const fetchOrderbook = async () => {\r\n  const response = await axios.get('https://api.binance.com/api/v3/depth', {\r\n    params: {\r\n      symbol: 'BTCUSDT',\r\n      limit: 10,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,iBAAiB;IAC5B,MAAM,WAAW,MAAM,wIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,wCAAwC;QACvE,QAAQ;YACN,QAAQ;YACR,OAAO;QACT;IACF;IACA,OAAO,SAAS,IAAI;AACtB"}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kumud/Dropbox/My%20PC%20%28Vanshika%29/Desktop/crypto-orderbook/src/app/components/Orderbook.js"],"sourcesContent":["\"use client\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { fetchOrderbook } from \"../lib/api\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, registerables } from \"chart.js\";\r\n\r\nChartJS.register(...registerables);\r\n\r\nconst Orderbook = () => {\r\n  const [orderbook, setOrderbook] = useState({ bids: [], asks: [] });\r\n  const [spread, setSpread] = useState(0);\r\n  const [imbalance, setImbalance] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      const data = await fetchOrderbook();\r\n      setOrderbook(data);\r\n      \r\n      // Calculate spread\r\n      const spreadValue =\r\n        data.bids[0] && data.asks[0]\r\n          ? parseFloat(data.asks[0][0]) - parseFloat(data.bids[0][0])\r\n          : 0;\r\n      setSpread(spreadValue);\r\n\r\n      // Calculate orderbook imbalance\r\n      const bidVolume = data.bids.reduce((sum, bid) => sum + parseFloat(bid[1]), 0);\r\n      const askVolume = data.asks.reduce((sum, ask) => sum + parseFloat(ask[1]), 0);\r\n      setImbalance(bidVolume / (bidVolume + askVolume));\r\n    }, 1000); // Update every second\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const marketDepthData = {\r\n    labels: orderbook.bids.map((bid) => bid[0]),\r\n    datasets: [\r\n      {\r\n        label: \"Bids\",\r\n        data: orderbook.bids.map((bid) => bid[1]),\r\n        borderColor: \"green\",\r\n        fill: false,\r\n      },\r\n      {\r\n        label: \"Asks\",\r\n        data: orderbook.asks.map((ask) => ask[1]),\r\n        borderColor: \"red\",\r\n        fill: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Real-time BTC-USD Orderbook</h2>\r\n      <div>\r\n        <h3>Spread: {spread}</h3>\r\n        <h3>Imbalance: {imbalance}</h3>\r\n      </div>\r\n      <div>\r\n        <h3>Bids</h3>\r\n        <ul>\r\n          {orderbook.bids.map((bid, index) => (\r\n            <li key={index}>{`Price: ${bid[0]}, Quantity: ${bid[1]}`}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <h3>Asks</h3>\r\n        <ul>\r\n          {orderbook.asks.map((ask, index) => (\r\n            <li key={index}>{`Price: ${ask[0]}, Quantity: ${ask[1]}`}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <h3>Market Depth Chart</h3>\r\n        <Line data={marketDepthData} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Orderbook;\r\n"],"names":[],"mappings":";;;;AACA;AACA;AAEA;AADA;;;AAHA;;;;;AAMA,+JAAA,CAAA,QAAO,CAAC,QAAQ,IAAI,+JAAA,CAAA,gBAAa;AAEjC,MAAM,YAAY;;IAChB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;QAAE,MAAM,EAAE;QAAE,MAAM,EAAE;IAAC;IAChE,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACR,MAAM,WAAW;gDAAY;oBAC3B,MAAM,OAAO,MAAM,CAAA,GAAA,2HAAA,CAAA,iBAAc,AAAD;oBAChC,aAAa;oBAEb,mBAAmB;oBACnB,MAAM,cACJ,KAAK,IAAI,CAAC,EAAE,IAAI,KAAK,IAAI,CAAC,EAAE,GACxB,WAAW,KAAK,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,WAAW,KAAK,IAAI,CAAC,EAAE,CAAC,EAAE,IACxD;oBACN,UAAU;oBAEV,gCAAgC;oBAChC,MAAM,YAAY,KAAK,IAAI,CAAC,MAAM;kEAAC,CAAC,KAAK,MAAQ,MAAM,WAAW,GAAG,CAAC,EAAE;iEAAG;oBAC3E,MAAM,YAAY,KAAK,IAAI,CAAC,MAAM;kEAAC,CAAC,KAAK,MAAQ,MAAM,WAAW,GAAG,CAAC,EAAE;iEAAG;oBAC3E,aAAa,YAAY,CAAC,YAAY,SAAS;gBACjD;+CAAG,OAAO,sBAAsB;YAEhC;uCAAO,IAAM,cAAc;;QAC7B;8BAAG,EAAE;IAEL,MAAM,kBAAkB;QACtB,QAAQ,UAAU,IAAI,CAAC,GAAG,CAAC,CAAC,MAAQ,GAAG,CAAC,EAAE;QAC1C,UAAU;YACR;gBACE,OAAO;gBACP,MAAM,UAAU,IAAI,CAAC,GAAG,CAAC,CAAC,MAAQ,GAAG,CAAC,EAAE;gBACxC,aAAa;gBACb,MAAM;YACR;YACA;gBACE,OAAO;gBACP,MAAM,UAAU,IAAI,CAAC,GAAG,CAAC,CAAC,MAAQ,GAAG,CAAC,EAAE;gBACxC,aAAa;gBACb,MAAM;YACR;SACD;IACH;IAEA,qBACE,6LAAC;;0BACC,6LAAC;0BAAG;;;;;;0BACJ,6LAAC;;kCACC,6LAAC;;4BAAG;4BAAS;;;;;;;kCACb,6LAAC;;4BAAG;4BAAY;;;;;;;;;;;;;0BAElB,6LAAC;;kCACC,6LAAC;kCAAG;;;;;;kCACJ,6LAAC;kCACE,UAAU,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,sBACxB,6LAAC;0CAAgB,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,GAAG,CAAC,EAAE,EAAE;+BAA/C;;;;;;;;;;;;;;;;0BAIf,6LAAC;;kCACC,6LAAC;kCAAG;;;;;;kCACJ,6LAAC;kCACE,UAAU,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,sBACxB,6LAAC;0CAAgB,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,GAAG,CAAC,EAAE,EAAE;+BAA/C;;;;;;;;;;;;;;;;0BAIf,6LAAC;;kCACC,6LAAC;kCAAG;;;;;;kCACJ,6LAAC,yJAAA,CAAA,OAAI;wBAAC,MAAM;;;;;;;;;;;;;;;;;;AAIpB;GAzEM;KAAA;uCA2ES"}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}